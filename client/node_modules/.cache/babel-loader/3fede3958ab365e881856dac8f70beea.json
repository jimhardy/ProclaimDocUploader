{"ast":null,"code":"var _jsxFileName = \"/Users/james/Sites/proclaim-doc-import/client/src/App.js\";\nimport React, { Component } from 'react'; // import Notifications, { notify } from 'react-notify-toast';\n\nimport Spinner from './Spinner';\nimport Images from './Images';\nimport Buttons from './Buttons';\nimport { API_URL } from './config';\nimport './App.css';\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nexport default class App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      loading: true,\n      uploading: false,\n      images: []\n    };\n\n    this.onChange = e => {\n      const errs = [];\n      const files = Array.from(e.target.files);\n\n      if (files.length > 10) {\n        const msg = 'Only 10 images can be uploaded at a time'; // return this.toast(msg, 'custom', 2000, toastColor);\n      }\n\n      const formData = new FormData();\n      const types = ['image/png', 'image/jpeg', 'image/gif'];\n      files.forEach((file, i) => {\n        if (types.every(type => file.type !== type)) {\n          toast(\"not a supported format\");\n        }\n\n        if (file.size > 20000) {\n          toast('is too large, please pick a smaller file');\n        }\n\n        formData.append(i, file);\n      });\n\n      if (errs.length) {// return errs.forEach(err => this.toast(err, 'custom', 2000, toastColor));\n      }\n\n      try {\n        this.setState({\n          uploading: true\n        });\n        fetch(\"\".concat(API_URL, \"/upload\"), {\n          method: 'POST',\n          body: formData\n        }).then(res => {\n          if (!res.ok) {\n            throw res;\n          }\n\n          return res.json();\n        }).then(images => {\n          this.setState({\n            uploading: false,\n            images\n          });\n        }).catch(err => {\n          err.json().then(e => {\n            // this.toast(e.message, 'custom', 2000, toastColor);\n            this.setState({\n              uploading: false\n            });\n          });\n        });\n      } catch (e) {\n        this.setState({\n          uploading: false\n        });\n      }\n    };\n\n    this.filter = id => {\n      return this.state.images.filter(image => image.public_id !== id);\n    };\n\n    this.removeImage = id => {\n      this.setState({\n        images: this.filter(id)\n      });\n    };\n\n    this.onError = id => {\n      this.setState({\n        images: this.filter(id)\n      });\n    };\n  }\n\n  componentDidMount() {\n    fetch(\"\".concat(API_URL, \"/wake-up\")).then(res => {\n      if (res.ok) {\n        return this.setState({\n          loading: false\n        });\n      }\n\n      const msg = 'No response from server'; // this.toast(msg, 'custom', 2000, toastColor);\n    });\n  } // toast = notify.createShowQueue();s\n\n\n  render() {\n    const _this$state = this.state,\n          loading = _this$state.loading,\n          uploading = _this$state.uploading,\n          images = _this$state.images;\n\n    const content = () => {\n      switch (true) {\n        case loading || uploading:\n          return React.createElement(Spinner, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 105\n            },\n            __self: this\n          });\n\n        case images.length > 0:\n          return React.createElement(Images, {\n            images: images,\n            removeImage: this.removeImage,\n            onError: this.onError,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 108\n            },\n            __self: this\n          });\n\n        default:\n          return React.createElement(Buttons, {\n            onChange: this.onChange,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 115\n            },\n            __self: this\n          });\n      }\n    };\n\n    return React.createElement(\"div\", {\n      className: \"container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120\n      },\n      __self: this\n    }, React.createElement(ToastContainer, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"buttons\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122\n      },\n      __self: this\n    }, content()));\n  }\n\n}","map":{"version":3,"sources":["/Users/james/Sites/proclaim-doc-import/client/src/App.js"],"names":["React","Component","Spinner","Images","Buttons","API_URL","ToastContainer","toast","App","state","loading","uploading","images","onChange","e","errs","files","Array","from","target","length","msg","formData","FormData","types","forEach","file","i","every","type","size","append","setState","fetch","method","body","then","res","ok","json","catch","err","filter","id","image","public_id","removeImage","onError","componentDidMount","render","content"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\n// import Notifications, { notify } from 'react-notify-toast';\nimport Spinner from './Spinner';\nimport Images from './Images';\nimport Buttons from './Buttons';\nimport { API_URL } from './config';\nimport './App.css';\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\nexport default class App extends Component {\n  state = {\n    loading: true,\n    uploading: false,\n    images: []\n  };\n\n  componentDidMount() {\n    fetch(`${API_URL}/wake-up`).then(res => {\n      if (res.ok) {\n        return this.setState({ loading: false });\n      }\n      const msg = 'No response from server';\n      // this.toast(msg, 'custom', 2000, toastColor);\n    });\n  }\n\n  // toast = notify.createShowQueue();s\n\n  onChange = e => {\n    const errs = [];\n    const files = Array.from(e.target.files);\n\n    if (files.length > 10) {\n      const msg = 'Only 10 images can be uploaded at a time';\n      // return this.toast(msg, 'custom', 2000, toastColor);\n    }\n\n    const formData = new FormData();\n    const types = ['image/png', 'image/jpeg', 'image/gif'];\n\n    files.forEach((file, i) => {\n      if (types.every(type => file.type !== type)) {\n        toast(`not a supported format`);\n      }\n\n      if (file.size > 20000) {\n        toast('is too large, please pick a smaller file');\n      }\n\n      formData.append(i, file);\n    });\n\n    if (errs.length) {\n      // return errs.forEach(err => this.toast(err, 'custom', 2000, toastColor));\n    }\n    try {\n      this.setState({ uploading: true });\n\n      fetch(`${API_URL}/upload`, {\n        method: 'POST',\n        body: formData\n      })\n        .then(res => {\n          if (!res.ok) {\n            throw res;\n          }\n          return res.json();\n        })\n        .then(images => {\n          this.setState({\n            uploading: false,\n            images\n          });\n        })\n        .catch(err => {\n          err.json().then(e => {\n            // this.toast(e.message, 'custom', 2000, toastColor);\n            this.setState({ uploading: false });\n          });\n        });\n    } catch (e) {\n      this.setState({ uploading: false });\n    }\n  };\n\n  filter = id => {\n    return this.state.images.filter(image => image.public_id !== id);\n  };\n\n  removeImage = id => {\n    this.setState({ images: this.filter(id) });\n  };\n\n  onError = id => {\n    this.setState({ images: this.filter(id) });\n  };\n\n  render() {\n    const { loading, uploading, images } = this.state;\n\n    const content = () => {\n      switch (true) {\n        case loading || uploading:\n          return <Spinner />;\n        case images.length > 0:\n          return (\n            <Images\n              images={images}\n              removeImage={this.removeImage}\n              onError={this.onError}\n            />\n          );\n        default:\n          return <Buttons onChange={this.onChange} />;\n      }\n    };\n\n    return (\n      <div className=\"container\">\n        <ToastContainer />\n        <div className=\"buttons\">{content()}</div>\n      </div>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}
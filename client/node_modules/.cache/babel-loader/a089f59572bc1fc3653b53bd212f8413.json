{"ast":null,"code":"var _jsxFileName = \"/Users/james/Sites/proclaim-doc-import/client/src/App.js\";\nimport React, { Component } from 'react'; // import Notifications, { notify } from 'react-notify-toast';\n\nimport Spinner from './Spinner';\nimport Login from './login';\nimport Images from './Images';\nimport Buttons from './Buttons';\nimport { API_URL } from './config';\nimport './App.css';\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nexport default class App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      loading: true,\n      images: [],\n      login: {\n        caseRef: '',\n        password: ''\n      }\n    };\n\n    this.onChange = e => {\n      const files = Array.from(e.target.files);\n\n      if (files.length > 10) {\n        toast.error('Only 10 images can be uploaded at a time', {\n          position: toast.POSITION.TOP_CENTER\n        });\n      }\n\n      const formData = new FormData();\n      const types = ['image/png', 'image/jpeg', 'image/gif'];\n      files.forEach((file, i) => {\n        let err = [];\n\n        if (types.every(type => file.type !== type)) {\n          let msg = 'Not a supported format';\n          err.push(msg);\n          toast.error(msg, {\n            position: toast.POSITION.TOP_CENTER\n          });\n        }\n\n        if (file.size > 2000000) {\n          let msg = 'Image is too large, please select a smaller file';\n          err.push(msg);\n          toast.error(msg, {\n            position: toast.POSITION.TOP_CENTER\n          });\n        }\n\n        if (!err.length) {\n          formData.append(i, file);\n        }\n      });\n\n      try {\n        this.setState({\n          loading: true\n        });\n        fetch(\"\".concat(API_URL, \"/image-upload\"), {\n          method: 'POST',\n          body: formData\n        }).then(res => {\n          if (!res.ok) {\n            toast.info('Please check the images are correct and click Push to Case', {\n              position: toast.POSITION.TOP_CENTER\n            });\n            throw res;\n          }\n\n          return res.json();\n        }).then(images => {\n          this.setState({\n            loading: false,\n            images\n          });\n        }).catch(err => {\n          this.setState({\n            loading: false\n          });\n        });\n      } catch (e) {\n        this.setState({\n          loading: false\n        });\n      }\n    };\n\n    this.filter = id => {\n      return this.state.images.filter(image => image.public_id !== id);\n    };\n\n    this.removeImage = id => {\n      console.log(id);\n      fetch(\"\".concat(API_URL, \"/delete-image\"), {\n        method: 'POST',\n        body: JSON.stringify(id)\n      });\n      this.setState({\n        images: this.filter(id)\n      });\n    };\n\n    this.addImageDescription = evt => {\n      console.log(evt.target.value);\n      this.setState({\n        description: evt.target.value\n      });\n    };\n\n    this.onError = id => {\n      this.setState({\n        images: this.filter(id)\n      });\n    };\n\n    this.onLogin = evt => {\n      this.setState({\n        login: evt\n      });\n    };\n  }\n\n  componentDidMount() {\n    fetch(\"\".concat(API_URL, \"/wake-up\")).then(res => {\n      if (res.ok) {\n        return this.setState({\n          loading: false\n        });\n      }\n\n      toast('No response from server');\n    });\n  }\n\n  render() {\n    const _this$state = this.state,\n          loading = _this$state.loading,\n          images = _this$state.images,\n          login = _this$state.login;\n\n    const content = () => {\n      switch (true) {\n        case !login.caseRef && !login.password:\n          return React.createElement(Login, {\n            handleSubmit: this.onLogin,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 130\n            },\n            __self: this\n          });\n\n        case loading:\n          return React.createElement(Spinner, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 132\n            },\n            __self: this\n          });\n\n        case images.length > 0:\n          return React.createElement(\"div\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 135\n            },\n            __self: this\n          }, React.createElement(Images, {\n            images: images,\n            removeImage: this.removeImage,\n            onError: this.onError,\n            handleChange: this.addImageDescription,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 136\n            },\n            __self: this\n          }), React.createElement(\"button\", {\n            className: \"Form-button\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 142\n            },\n            __self: this\n          }, \"Upload to Proclaim\"));\n\n        default:\n          return React.createElement(Buttons, {\n            onChange: this.onChange,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 146\n            },\n            __self: this\n          });\n      }\n    };\n\n    return React.createElement(\"div\", {\n      className: \"container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151\n      },\n      __self: this\n    }, React.createElement(ToastContainer, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"buttons\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153\n      },\n      __self: this\n    }, content()));\n  }\n\n}","map":{"version":3,"sources":["/Users/james/Sites/proclaim-doc-import/client/src/App.js"],"names":["React","Component","Spinner","Login","Images","Buttons","API_URL","ToastContainer","toast","App","state","loading","images","login","caseRef","password","onChange","e","files","Array","from","target","length","error","position","POSITION","TOP_CENTER","formData","FormData","types","forEach","file","i","err","every","type","msg","push","size","append","setState","fetch","method","body","then","res","ok","info","json","catch","filter","id","image","public_id","removeImage","console","log","JSON","stringify","addImageDescription","evt","value","description","onError","onLogin","componentDidMount","render","content"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\n// import Notifications, { notify } from 'react-notify-toast';\nimport Spinner from './Spinner';\nimport Login from './login';\nimport Images from './Images';\nimport Buttons from './Buttons';\nimport { API_URL } from './config';\nimport './App.css';\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\nexport default class App extends Component {\n  state = {\n    loading: true,\n    images: [],\n    login: {\n      caseRef: '',\n      password: ''\n    }\n  };\n\n  componentDidMount() {\n    fetch(`${API_URL}/wake-up`).then(res => {\n      if (res.ok) {\n        return this.setState({ loading: false });\n      }\n      toast('No response from server');\n    });\n  }\n\n  onChange = e => {\n    const files = Array.from(e.target.files);\n\n    if (files.length > 10) {\n      toast.error('Only 10 images can be uploaded at a time', {\n        position: toast.POSITION.TOP_CENTER\n      });\n    }\n\n    const formData = new FormData();\n    const types = ['image/png', 'image/jpeg', 'image/gif'];\n\n    files.forEach((file, i) => {\n      let err = [];\n      if (types.every(type => file.type !== type)) {\n        let msg = 'Not a supported format';\n        err.push(msg);\n        toast.error(msg, {\n          position: toast.POSITION.TOP_CENTER\n        });\n      }\n\n      if (file.size > 2000000) {\n        let msg = 'Image is too large, please select a smaller file';\n        err.push(msg);\n        toast.error(msg, {\n          position: toast.POSITION.TOP_CENTER\n        });\n      }\n      if (!err.length) {\n        formData.append(i, file);\n      }\n    });\n\n    try {\n      this.setState({ loading: true });\n\n      fetch(`${API_URL}/image-upload`, {\n        method: 'POST',\n        body: formData\n      })\n        .then(res => {\n          if (!res.ok) {\n            toast.info(\n              'Please check the images are correct and click Push to Case',\n              { position: toast.POSITION.TOP_CENTER }\n            );\n            throw res;\n          }\n          return res.json();\n        })\n        .then(images => {\n          this.setState({\n            loading: false,\n            images\n          });\n        })\n        .catch(err => {\n          this.setState({ loading: false });\n        });\n    } catch (e) {\n      this.setState({ loading: false });\n    }\n  };\n\n  filter = id => {\n    return this.state.images.filter(image => image.public_id !== id);\n  };\n\n  removeImage = id => {\n    console.log(id);\n    fetch(`${API_URL}/delete-image`, {\n      method: 'POST',\n      body: JSON.stringify(id)\n    });\n    this.setState({ images: this.filter(id) });\n  };\n\n  addImageDescription = evt => {\n    console.log(evt.target.value);\n    this.setState({\n      description: evt.target.value\n    });\n  };\n\n  onError = id => {\n    this.setState({ images: this.filter(id) });\n  };\n\n  onLogin = evt => {\n    this.setState({ login: evt });\n  };\n\n  render() {\n    const { loading, images, login } = this.state;\n\n    const content = () => {\n      switch (true) {\n        case !login.caseRef && !login.password:\n          return <Login handleSubmit={this.onLogin} />;\n        case loading:\n          return <Spinner />;\n        case images.length > 0:\n          return (\n            <div>\n              <Images\n                images={images}\n                removeImage={this.removeImage}\n                onError={this.onError}\n                handleChange={this.addImageDescription}\n              />\n              <button className=\"Form-button\">Upload to Proclaim</button>\n            </div>\n          );\n        default:\n          return <Buttons onChange={this.onChange} />;\n      }\n    };\n\n    return (\n      <div className=\"container\">\n        <ToastContainer />\n        <div className=\"buttons\">{content()}</div>\n      </div>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}
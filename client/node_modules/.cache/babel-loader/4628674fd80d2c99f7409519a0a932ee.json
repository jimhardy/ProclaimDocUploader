{"ast":null,"code":"import _defineProperty from \"/Users/james/Sites/proclaim-doc-import/client/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/james/Sites/proclaim-doc-import/client/src/App.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { Component } from 'react'; // import Notifications, { notify } from 'react-notify-toast';\n\nimport Spinner from './Spinner';\nimport Login from './login'; // import Images from './ImageList';\n\nimport Image from './Image';\nimport Axios from 'axios';\nimport Buttons from './Buttons';\nimport { API_URL } from './config';\nimport './App.css';\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nexport default class App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      loading: true,\n      images: [],\n      login: {\n        caseRef: '',\n        password: ''\n      }\n    };\n\n    this.onChange = e => {\n      const files = Array.from(e.target.files);\n\n      if (files.length > 10) {\n        toast.error('Only 10 images can be uploaded at a time', {\n          position: toast.POSITION.TOP_CENTER\n        });\n      }\n\n      const formData = new FormData();\n      const types = ['image/png', 'image/jpeg', 'image/gif'];\n      files.forEach((file, i) => {\n        let err = [];\n\n        if (types.every(type => file.type !== type)) {\n          let msg = 'Not a supported format';\n          err.push(msg);\n          toast.error(msg, {\n            position: toast.POSITION.TOP_CENTER\n          });\n        }\n\n        if (file.size > 2000000) {\n          let msg = 'Image is too large, please select a smaller file';\n          err.push(msg);\n          toast.error(msg, {\n            position: toast.POSITION.TOP_CENTER\n          });\n        }\n\n        if (!err.length) {\n          formData.append(i, file);\n        }\n      });\n\n      try {\n        this.setState({\n          loading: true\n        });\n        fetch(\"\".concat(API_URL, \"/image-upload\"), {\n          method: 'POST',\n          body: formData\n        }).then(res => {\n          if (!res.ok) {\n            toast.info('Please check the images are correct and click Push to Case', {\n              position: toast.POSITION.TOP_CENTER\n            });\n            throw res;\n          }\n\n          return res.json();\n        }).then(images => {\n          this.setState({\n            loading: false,\n            images: images.map(image => {\n              return _objectSpread({}, image, {\n                description: null\n              });\n            })\n          });\n        }).catch(err => {\n          this.setState({\n            loading: false\n          });\n        });\n      } catch (e) {\n        this.setState({\n          loading: false\n        });\n      }\n    };\n\n    this.filter = id => {\n      return this.state.images.filter(image => image.public_id !== id);\n    };\n\n    this.removeImage = async id => {\n      Axios.post(\"\".concat(API_URL, \"/delete-image\"), {\n        id\n      }).then(res => {\n        if (es.status === 200) {\n          console.log('deleted');\n        }\n      });\n      const updatedArr = await this.state.images.filter(image => image.public_id !== id);\n      await this.setState(st => ({\n        images: updatedArr\n      }));\n    };\n\n    this.addImageDescription = async (id, value) => {\n      const updatedArr = await this.state.images.map(image => {\n        if (image.public_id === id) {\n          return _objectSpread({}, image, {\n            description: value\n          });\n        }\n\n        return image;\n      });\n      await this.setState({\n        images: updatedArr\n      });\n    };\n\n    this.onError = id => {\n      this.setState({\n        images: this.filter(id)\n      });\n    };\n\n    this.onLogin = evt => {\n      this.setState({\n        login: evt\n      });\n    };\n  }\n\n  componentDidMount() {\n    fetch(\"\".concat(API_URL, \"/wake-up\")).then(res => {\n      if (res.ok) {\n        return this.setState({\n          loading: false\n        });\n      }\n\n      toast('No response from server');\n    });\n  }\n\n  render() {\n    const _this$state = this.state,\n          loading = _this$state.loading,\n          images = _this$state.images,\n          login = _this$state.login;\n\n    const content = () => {\n      switch (true) {\n        case !login.caseRef && !login.password:\n          return React.createElement(Login, {\n            handleSubmit: this.onLogin,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 143\n            },\n            __self: this\n          });\n\n        case loading:\n          return React.createElement(Spinner, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 145\n            },\n            __self: this\n          });\n\n        case images.length > 0:\n          return React.createElement(\"div\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 148\n            },\n            __self: this\n          }, this.state.images.map((image, i) => React.createElement(Image, {\n            removeImage: this.removeImage,\n            image: image,\n            onError: this.onError,\n            handleChange: this.addImageDescription,\n            id: i,\n            key: i,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 150\n            },\n            __self: this\n          })), React.createElement(\"button\", {\n            className: \"Form-button\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 160\n            },\n            __self: this\n          }, \"Upload to Proclaim\"));\n\n        default:\n          return React.createElement(Buttons, {\n            onChange: this.onChange,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 164\n            },\n            __self: this\n          });\n      }\n    };\n\n    return React.createElement(\"div\", {\n      className: \"container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169\n      },\n      __self: this\n    }, React.createElement(ToastContainer, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"buttons\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171\n      },\n      __self: this\n    }, content()));\n  }\n\n}","map":{"version":3,"sources":["/Users/james/Sites/proclaim-doc-import/client/src/App.js"],"names":["React","Component","Spinner","Login","Image","Axios","Buttons","API_URL","ToastContainer","toast","App","state","loading","images","login","caseRef","password","onChange","e","files","Array","from","target","length","error","position","POSITION","TOP_CENTER","formData","FormData","types","forEach","file","i","err","every","type","msg","push","size","append","setState","fetch","method","body","then","res","ok","info","json","map","image","description","catch","filter","id","public_id","removeImage","post","es","status","console","log","updatedArr","st","addImageDescription","value","onError","onLogin","evt","componentDidMount","render","content"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC,C,CACA;;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,OAAOC,KAAP,MAAkB,SAAlB,C,CACA;;AACA,OAAOC,KAAP,MAAkB,SAAlB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,OAAOC,OAAP,MAAoB,WAApB;AACA,SAASC,OAAT,QAAwB,UAAxB;AACA,OAAO,WAAP;AACA,SAASC,cAAT,EAAyBC,KAAzB,QAAsC,gBAAtC;AACA,OAAO,uCAAP;AAEA,eAAe,MAAMC,GAAN,SAAkBT,SAAlB,CAA4B;AAAA;AAAA;AAAA,SACzCU,KADyC,GACjC;AACNC,MAAAA,OAAO,EAAE,IADH;AAENC,MAAAA,MAAM,EAAE,EAFF;AAGNC,MAAAA,KAAK,EAAE;AACLC,QAAAA,OAAO,EAAE,EADJ;AAELC,QAAAA,QAAQ,EAAE;AAFL;AAHD,KADiC;;AAAA,SAmBzCC,QAnByC,GAmB9BC,CAAC,IAAI;AACd,YAAMC,KAAK,GAAGC,KAAK,CAACC,IAAN,CAAWH,CAAC,CAACI,MAAF,CAASH,KAApB,CAAd;;AAEA,UAAIA,KAAK,CAACI,MAAN,GAAe,EAAnB,EAAuB;AACrBd,QAAAA,KAAK,CAACe,KAAN,CAAY,0CAAZ,EAAwD;AACtDC,UAAAA,QAAQ,EAAEhB,KAAK,CAACiB,QAAN,CAAeC;AAD6B,SAAxD;AAGD;;AAED,YAAMC,QAAQ,GAAG,IAAIC,QAAJ,EAAjB;AACA,YAAMC,KAAK,GAAG,CAAC,WAAD,EAAc,YAAd,EAA4B,WAA5B,CAAd;AAEAX,MAAAA,KAAK,CAACY,OAAN,CAAc,CAACC,IAAD,EAAOC,CAAP,KAAa;AACzB,YAAIC,GAAG,GAAG,EAAV;;AACA,YAAIJ,KAAK,CAACK,KAAN,CAAYC,IAAI,IAAIJ,IAAI,CAACI,IAAL,KAAcA,IAAlC,CAAJ,EAA6C;AAC3C,cAAIC,GAAG,GAAG,wBAAV;AACAH,UAAAA,GAAG,CAACI,IAAJ,CAASD,GAAT;AACA5B,UAAAA,KAAK,CAACe,KAAN,CAAYa,GAAZ,EAAiB;AACfZ,YAAAA,QAAQ,EAAEhB,KAAK,CAACiB,QAAN,CAAeC;AADV,WAAjB;AAGD;;AAED,YAAIK,IAAI,CAACO,IAAL,GAAY,OAAhB,EAAyB;AACvB,cAAIF,GAAG,GAAG,kDAAV;AACAH,UAAAA,GAAG,CAACI,IAAJ,CAASD,GAAT;AACA5B,UAAAA,KAAK,CAACe,KAAN,CAAYa,GAAZ,EAAiB;AACfZ,YAAAA,QAAQ,EAAEhB,KAAK,CAACiB,QAAN,CAAeC;AADV,WAAjB;AAGD;;AACD,YAAI,CAACO,GAAG,CAACX,MAAT,EAAiB;AACfK,UAAAA,QAAQ,CAACY,MAAT,CAAgBP,CAAhB,EAAmBD,IAAnB;AACD;AACF,OApBD;;AAsBA,UAAI;AACF,aAAKS,QAAL,CAAc;AAAE7B,UAAAA,OAAO,EAAE;AAAX,SAAd;AACA8B,QAAAA,KAAK,WAAInC,OAAJ,oBAA4B;AAC/BoC,UAAAA,MAAM,EAAE,MADuB;AAE/BC,UAAAA,IAAI,EAAEhB;AAFyB,SAA5B,CAAL,CAIGiB,IAJH,CAIQC,GAAG,IAAI;AACX,cAAI,CAACA,GAAG,CAACC,EAAT,EAAa;AACXtC,YAAAA,KAAK,CAACuC,IAAN,CACE,4DADF,EAEE;AAAEvB,cAAAA,QAAQ,EAAEhB,KAAK,CAACiB,QAAN,CAAeC;AAA3B,aAFF;AAIA,kBAAMmB,GAAN;AACD;;AACD,iBAAOA,GAAG,CAACG,IAAJ,EAAP;AACD,SAbH,EAcGJ,IAdH,CAcQhC,MAAM,IAAI;AACd,eAAK4B,QAAL,CAAc;AACZ7B,YAAAA,OAAO,EAAE,KADG;AAEZC,YAAAA,MAAM,EAAEA,MAAM,CAACqC,GAAP,CAAWC,KAAK,IAAI;AAC1B,uCAAYA,KAAZ;AAAmBC,gBAAAA,WAAW,EAAE;AAAhC;AACD,aAFO;AAFI,WAAd;AAMD,SArBH,EAsBGC,KAtBH,CAsBSnB,GAAG,IAAI;AACZ,eAAKO,QAAL,CAAc;AAAE7B,YAAAA,OAAO,EAAE;AAAX,WAAd;AACD,SAxBH;AAyBD,OA3BD,CA2BE,OAAOM,CAAP,EAAU;AACV,aAAKuB,QAAL,CAAc;AAAE7B,UAAAA,OAAO,EAAE;AAAX,SAAd;AACD;AACF,KAnFwC;;AAAA,SAqFzC0C,MArFyC,GAqFhCC,EAAE,IAAI;AACb,aAAO,KAAK5C,KAAL,CAAWE,MAAX,CAAkByC,MAAlB,CAAyBH,KAAK,IAAIA,KAAK,CAACK,SAAN,KAAoBD,EAAtD,CAAP;AACD,KAvFwC;;AAAA,SAyFzCE,WAzFyC,GAyF3B,MAAMF,EAAN,IAAY;AACxBlD,MAAAA,KAAK,CAACqD,IAAN,WAAcnD,OAAd,oBAAsC;AAAEgD,QAAAA;AAAF,OAAtC,EAA8CV,IAA9C,CAAmDC,GAAG,IAAI;AACxD,YAAIa,EAAE,CAACC,MAAH,KAAc,GAAlB,EAAuB;AACrBC,UAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ;AACD;AACF,OAJD;AAKA,YAAMC,UAAU,GAAG,MAAM,KAAKpD,KAAL,CAAWE,MAAX,CAAkByC,MAAlB,CACvBH,KAAK,IAAIA,KAAK,CAACK,SAAN,KAAoBD,EADN,CAAzB;AAIA,YAAM,KAAKd,QAAL,CAAcuB,EAAE,KAAK;AACzBnD,QAAAA,MAAM,EAAEkD;AADiB,OAAL,CAAhB,CAAN;AAGD,KAtGwC;;AAAA,SAwGzCE,mBAxGyC,GAwGnB,OAAOV,EAAP,EAAWW,KAAX,KAAqB;AACzC,YAAMH,UAAU,GAAG,MAAM,KAAKpD,KAAL,CAAWE,MAAX,CAAkBqC,GAAlB,CAAsBC,KAAK,IAAI;AACtD,YAAIA,KAAK,CAACK,SAAN,KAAoBD,EAAxB,EAA4B;AAC1B,mCAAYJ,KAAZ;AAAmBC,YAAAA,WAAW,EAAEc;AAAhC;AACD;;AACD,eAAOf,KAAP;AACD,OALwB,CAAzB;AAMA,YAAM,KAAKV,QAAL,CAAc;AAAE5B,QAAAA,MAAM,EAAEkD;AAAV,OAAd,CAAN;AACD,KAhHwC;;AAAA,SAkHzCI,OAlHyC,GAkH/BZ,EAAE,IAAI;AACd,WAAKd,QAAL,CAAc;AAAE5B,QAAAA,MAAM,EAAE,KAAKyC,MAAL,CAAYC,EAAZ;AAAV,OAAd;AACD,KApHwC;;AAAA,SAsHzCa,OAtHyC,GAsH/BC,GAAG,IAAI;AACf,WAAK5B,QAAL,CAAc;AAAE3B,QAAAA,KAAK,EAAEuD;AAAT,OAAd;AACD,KAxHwC;AAAA;;AAUzCC,EAAAA,iBAAiB,GAAG;AAClB5B,IAAAA,KAAK,WAAInC,OAAJ,cAAL,CAA4BsC,IAA5B,CAAiCC,GAAG,IAAI;AACtC,UAAIA,GAAG,CAACC,EAAR,EAAY;AACV,eAAO,KAAKN,QAAL,CAAc;AAAE7B,UAAAA,OAAO,EAAE;AAAX,SAAd,CAAP;AACD;;AACDH,MAAAA,KAAK,CAAC,yBAAD,CAAL;AACD,KALD;AAMD;;AAyGD8D,EAAAA,MAAM,GAAG;AAAA,wBAC4B,KAAK5D,KADjC;AAAA,UACCC,OADD,eACCA,OADD;AAAA,UACUC,MADV,eACUA,MADV;AAAA,UACkBC,KADlB,eACkBA,KADlB;;AAGP,UAAM0D,OAAO,GAAG,MAAM;AACpB,cAAQ,IAAR;AACE,aAAK,CAAC1D,KAAK,CAACC,OAAP,IAAkB,CAACD,KAAK,CAACE,QAA9B;AACE,iBAAO,oBAAC,KAAD;AAAO,YAAA,YAAY,EAAE,KAAKoD,OAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAP;;AACF,aAAKxD,OAAL;AACE,iBAAO,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAP;;AACF,aAAKC,MAAM,CAACU,MAAP,GAAgB,CAArB;AACE,iBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aACG,KAAKZ,KAAL,CAAWE,MAAX,CAAkBqC,GAAlB,CAAsB,CAACC,KAAD,EAAQlB,CAAR,KACrB,oBAAC,KAAD;AACE,YAAA,WAAW,EAAE,KAAKwB,WADpB;AAEE,YAAA,KAAK,EAAEN,KAFT;AAGE,YAAA,OAAO,EAAE,KAAKgB,OAHhB;AAIE,YAAA,YAAY,EAAE,KAAKF,mBAJrB;AAKE,YAAA,EAAE,EAAEhC,CALN;AAME,YAAA,GAAG,EAAEA,CANP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADD,CADH,EAYE;AAAQ,YAAA,SAAS,EAAC,aAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kCAZF,CADF;;AAgBF;AACE,iBAAO,oBAAC,OAAD;AAAS,YAAA,QAAQ,EAAE,KAAKhB,QAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAP;AAvBJ;AAyBD,KA1BD;;AA4BA,WACE;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,cAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,EAEE;AAAK,MAAA,SAAS,EAAC,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAA0BuD,OAAO,EAAjC,CAFF,CADF;AAMD;;AA/JwC","sourcesContent":["import React, { Component } from 'react';\n// import Notifications, { notify } from 'react-notify-toast';\nimport Spinner from './Spinner';\nimport Login from './login';\n// import Images from './ImageList';\nimport Image from './Image';\nimport Axios from 'axios';\n\nimport Buttons from './Buttons';\nimport { API_URL } from './config';\nimport './App.css';\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\nexport default class App extends Component {\n  state = {\n    loading: true,\n    images: [],\n    login: {\n      caseRef: '',\n      password: ''\n    }\n  };\n\n  componentDidMount() {\n    fetch(`${API_URL}/wake-up`).then(res => {\n      if (res.ok) {\n        return this.setState({ loading: false });\n      }\n      toast('No response from server');\n    });\n  }\n\n  onChange = e => {\n    const files = Array.from(e.target.files);\n\n    if (files.length > 10) {\n      toast.error('Only 10 images can be uploaded at a time', {\n        position: toast.POSITION.TOP_CENTER\n      });\n    }\n\n    const formData = new FormData();\n    const types = ['image/png', 'image/jpeg', 'image/gif'];\n\n    files.forEach((file, i) => {\n      let err = [];\n      if (types.every(type => file.type !== type)) {\n        let msg = 'Not a supported format';\n        err.push(msg);\n        toast.error(msg, {\n          position: toast.POSITION.TOP_CENTER\n        });\n      }\n\n      if (file.size > 2000000) {\n        let msg = 'Image is too large, please select a smaller file';\n        err.push(msg);\n        toast.error(msg, {\n          position: toast.POSITION.TOP_CENTER\n        });\n      }\n      if (!err.length) {\n        formData.append(i, file);\n      }\n    });\n\n    try {\n      this.setState({ loading: true });\n      fetch(`${API_URL}/image-upload`, {\n        method: 'POST',\n        body: formData\n      })\n        .then(res => {\n          if (!res.ok) {\n            toast.info(\n              'Please check the images are correct and click Push to Case',\n              { position: toast.POSITION.TOP_CENTER }\n            );\n            throw res;\n          }\n          return res.json();\n        })\n        .then(images => {\n          this.setState({\n            loading: false,\n            images: images.map(image => {\n              return { ...image, description: null };\n            })\n          });\n        })\n        .catch(err => {\n          this.setState({ loading: false });\n        });\n    } catch (e) {\n      this.setState({ loading: false });\n    }\n  };\n\n  filter = id => {\n    return this.state.images.filter(image => image.public_id !== id);\n  };\n\n  removeImage = async id => {\n    Axios.post(`${API_URL}/delete-image`, { id }).then(res => {\n      if (es.status === 200) {\n        console.log('deleted');\n      }\n    });\n    const updatedArr = await this.state.images.filter(\n      image => image.public_id !== id\n    );\n\n    await this.setState(st => ({\n      images: updatedArr\n    }));\n  };\n\n  addImageDescription = async (id, value) => {\n    const updatedArr = await this.state.images.map(image => {\n      if (image.public_id === id) {\n        return { ...image, description: value };\n      }\n      return image;\n    });\n    await this.setState({ images: updatedArr });\n  };\n\n  onError = id => {\n    this.setState({ images: this.filter(id) });\n  };\n\n  onLogin = evt => {\n    this.setState({ login: evt });\n  };\n\n  render() {\n    const { loading, images, login } = this.state;\n\n    const content = () => {\n      switch (true) {\n        case !login.caseRef && !login.password:\n          return <Login handleSubmit={this.onLogin} />;\n        case loading:\n          return <Spinner />;\n        case images.length > 0:\n          return (\n            <div>\n              {this.state.images.map((image, i) => (\n                <Image\n                  removeImage={this.removeImage}\n                  image={image}\n                  onError={this.onError}\n                  handleChange={this.addImageDescription}\n                  id={i}\n                  key={i}\n                />\n              ))}\n\n              <button className=\"Form-button\">Upload to Proclaim</button>\n            </div>\n          );\n        default:\n          return <Buttons onChange={this.onChange} />;\n      }\n    };\n\n    return (\n      <div className=\"container\">\n        <ToastContainer />\n        <div className=\"buttons\">{content()}</div>\n      </div>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}